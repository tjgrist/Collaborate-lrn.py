@model Collaborate_lrn_Py.Models.Quiz

@{
    ViewBag.Title = Model.Name;
}
<style>
    textarea{
        max-width: 100%;
        width: 100%;
        height: 250px;
        border: 2px solid deepskyblue;
        background-color: #060606;
        opacity: 0.5;
        color: white;
    }
</style>
<h2>@ViewBag.Title <small>Code Challenge</small></h2>
<div class="row">
    <div class="col-md-3">
        <div class="jumbotron">
            <h5 style="color:cadetblue;font-weight:bold">@Html.DisplayNameFor(model => model.Goal)</h5>
            <p style="font-size:medium;color:deepskyblue;padding:0px 0px 0px 0px">@Html.DisplayFor(model => model.Goal)</p>
        </div>
    </div>
    <div class="col-md-9">
        <div class="jumbotron">
            <div>
                <h5 style="color:cadetblue;font-weight:bold">@Html.DisplayNameFor(model => model.Instruction)</h5>
                <pre>@Html.DisplayFor(model => model.Instruction)</pre>
            </div>
        </div>
    </div>
</div>
<!-- Run Python in the browser here -->
<h2>Try It</h2>   
    <div class="row">
    <div class="col-md-8">
        <div class="jumbotron">
            
            <form>
                <textarea id="yourcode" placeholder="Write your code here."></textarea>@*@Html.DisplayFor(model => model.DisplayedCode) place me in textarea*@
                <br /><br />
                <div style="display:inline-block">
                    <button type="button" class="btn btn-primary" onclick="runit()">Run</button>
                    <button type="button" class="btn btn-primary" onclick="autoGrade()">Check</button>
                    <button type="button" class="btn btn-info glyphicon glyphicon-eye-open" data-toggle="modal" data-target="#myModal"></button>
                    <span>@Html.ActionLink(" ", "Complete", "Profile", null, new { @class = "btn btn-success glyphicon glyphicon-ok", @datatoggle = "tooltip", @dataplacement = "top", @title = "Complete Tutorial" })</span>
                </div>
            </form>
        </div>
    </div>
    <div class="col-md-4">
        <div class="jumbotron">
            <pre id="output">Your Code's Output</pre>
            <div id="codecheck"></div>
            <div id="result"></div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="jumbotron">
            <p style="font-size:medium;color:deepskyblue">Remember to use four spaces instead of tabs when indenting.</p>
        </div>
    </div>
</div>
<!--Browser python section ends here -->

<!-- Modal -->
<div id="myModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">@Html.DisplayNameFor(model => model.Answer)</h4>
            </div>
            <div class="modal-body">
                <pre><code class="python" id="show">@Html.DisplayFor(model => model.Answer)</code></pre>
            </div>
        </div>
    </div>
</div>
<!--End Modal-->



    @*<script src="~/Scripts/browserpy.js" type="text/javascript"></script>*@

    @*<div id="formSection" class="container text-center">
            @using (Ajax.BeginForm(
                            "AutoGrade",
                            "Quiz",
                            null,
                            new AjaxOptions
                            {
                                UpdateTargetId = "ajax",
                                InsertionMode = InsertionMode.Replace,
                                HttpMethod = "post",
                            }, new { @class = "" }))
            {
                 <input class="btn btn-info" type="submit" value="Check Code with AJAX"/>
            }
    <div id="ajax" class="bg-default"></div>
    </div>
<br />*@
@*<div class="container text-center">
    <button type="button" class="btn btn-primary" onclick="autoGrade()">Auto Grade</button>
    <br />
    <p id="p"></p>
    <div id="jajax" class="bg-default"></div>
</div>*@



@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/bootstrap")
<script src="~/Scripts/skulpt.min.js" type="text/javascript"></script>
<script src="~/Scripts/skulpt-stdlib.js" type="text/javascript"></script>
@*<script src="~/Scripts/react/react.min.js"></script>*@
@*<script src="@Url.Content("~/Scripts/JSX/GoodJob.jsx")"></script>*@
<script>
    function autoGrade() {
        var userCode = $("#yourcode").val();
        var codeOutput = $("#output").html().toString();
        if (codeOutput === null || codeOutput === undefined){
            console.log(codeOutput);
            $("#codecheck").append("It looks like your code didn't print anything...").removeClass("alert alert-success").addClass("alert alert-danger")
        }
        else{
            var id = @Model.Id.ToString();
            var request = $.ajax({
                url: "@Url.Action("AutoGrade", "Quiz")",
                method: "POST",
                cache: false,
                data: {
                    yourcode: userCode,
                    output: codeOutput,
                    expected: id
                }
            });

            request.fail(function (jqXHR, textStatus, thrownError) {
                console.log(thrownError);
                $("#codecheck").html(thrownError + ": Something went wrong during the processing of the request. Try again.").removeClass("alert alert-success").addClass("alert alert-danger").fadeOut(4000);
            });

            request.done(function (data) {
                if (data.toString().includes("done")){
                    $("#codecheck").text(data).removeClass("alert alert-danger").addClass("alert alert-success");
                }
                else{
                    $("#codecheck").text(data).removeClass("alert alert-success").addClass("alert alert-danger");
                }
            });
        }
    }
</script>

<script>
    function outf(text) {
        var mypre = document.getElementById("output");
        mypre.innerHTML = mypre.innerHTML + text;
    }
    function builtinRead(x) {
        if (Sk.builtinFiles === undefined || Sk.builtinFiles["files"][x] === undefined)
            throw "File not found: '" + x + "'";
        return Sk.builtinFiles["files"][x];
    }

    var runit = function (){
        var prog = document.getElementById("yourcode").value;
        var mypre = document.getElementById("output");
        mypre.innerHTML = '';
        Sk.pre = "output";
        Sk.configure({ output: outf, read: builtinRead });
        (Sk.TurtleGraphics || (Sk.TurtleGraphics = {})).target = 'mycanvas';
        var myPromise = Sk.misceval.asyncToPromise(function () {
            return Sk.importMainWithBody("<stdin>", false, prog, true);
        });
        myPromise.then(function (mod) {
            console.log('success');
            $("#result").html("That is valid code!").removeClass("alert alert-danger").addClass("alert alert-success").fadeOut(4000);
        },
            function (err) {
                console.log(err.toString());
                $("#result").html(err.toString()).removeClass("alert alert-success").addClass("alert alert-danger").fadeOut(4000);
            });
    }
</script>
